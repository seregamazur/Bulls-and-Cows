plugins {
        id "org.sonarqube" version "3.1.1"
        id "idea"
        id 'info.solidsoft.pitest' version '1.1.4'
        id "application"
        id "java"
        id "jacoco"
        }

        def BLUE = "\u001B[34m"
        mainClassName = "src.java.app.Application"

        sourceSets {
        main {
        java.srcDir("src/java")
        resources.srcDir("src/resources")
        }
        test {
        java.srcDir("src/test")
        }
        }


        sourceCompatibility = 1.8
        targetCompatibility = 1.8


        jar {
        baseName = 'BullsAndCows'
        def filePath = "${projectDir}/version.properties"
        File fileVersion = new File(filePath)
        def versionWithoutDescription = fileVersion.text.replace("VERSION_CODE=", "")
        def arrayOfSubversion = versionWithoutDescription.split("\\.");
        def firstNumber = arrayOfSubversion[0]
        def middleNumber = arrayOfSubversion[1]
        def lastNumber = arrayOfSubversion[2]
        version = firstNumber + "." + middleNumber + "." + lastNumber
        }

        repositories {
        jcenter()
        }

        dependencies {
        testCompile("junit:junit:4.12")
            testCompile "org.testfx:testfx-core:4.0.12-alpha"
            testCompile "org.testfx:openjfx-monocle:8u76-b04"
            testCompile "org.testfx:testfx-junit:4.0.12-alpha"
            compile 'junit:junit:4.12'

        }
        test {
        afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${BLUE} ${result.resultType}"
        }
        }

        task wrapper(type: Wrapper) {
        gradleVersion = '4.5'
        }

        jacoco {
        toolVersion = "0.7.4+"
        }

        jacocoTestReport {
        reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/jacocoHtml"
        }
        }
        check.dependsOn jacocoTestReport


        task incrementVersion {
        def filePath = "${projectDir}/version.properties"
        def ymlPath = "${projectDir}/.travis.yml"
        new VersionIncrementor(filePath, ymlPath).increment()
        }

    sonarqube {
        properties {
            property "sonar.projectKey", "seregamazur_Bulls-and-Cows"
        }
    }
	 task sonar(type:Exec) {commandLine "./gradlew sonarqube   -Dsonar.host.url=http://localhost:9000   -Dsonar.login=724dc80ecf22dc24bc9cdf0c38c497a70c8df043"  }

        pitest{
        testSourceSets = [sourceSets.test]
        mainSourceSets = [sourceSets.main]
        targetClasses = ['model*','utils*','controller*','view*']
        //jvmArgs = ['-Xmx1024m']
	timestampedReports = false
        //fileExtensionsToFilter += ['html']
 	outputFormats = ['XML', 'HTML']
        }

        def getVersion() {
        def filePath = "${projectDir}/version.properties"
        def ymlPath = "${projectDir}/.travis.yml"
        File fileVersion = new File(filePath, ymlPath)
        def versionWithoutDescription = fileVersion.text.replace("VERSION_CODE=", "")
        def arrayOfSubversion = versionWithoutDescription.split("\\.");
        println(arrayOfSubversion)
        def firstNumber = arrayOfSubversion[0]
        def middleNumber = arrayOfSubversion[1]
        def lastNumber = arrayOfSubversion[2]
        println(firstNumber + "." + middleNumber + "." + lastNumber)
        return (firstNumber + "." + middleNumber + "." + lastNumber)
        }

class VersionIncrementor {

    File fileVersion
    File ymlFile

    VersionIncrementor(String path, String ymlPath) {
        this.fileVersion = new File(path)
        this.ymlFile = new File(ymlPath)
    }

    def increment() {
        def versionWithoutDescription = fileVersion.text.replace("VERSION_CODE=", "")
        def arrayOfSubversion = versionWithoutDescription.split("\\.");
        def firstNumber = arrayOfSubversion[0].toInteger()
        def middleNumber = arrayOfSubversion[1].toInteger()
        def lastNumber = arrayOfSubversion[2].toInteger()

        def ymlFileText = ymlFile.text.toString()
        def prevVersionDesc =
                "build/libs/BullsAndCows-" + firstNumber+ "." + middleNumber + "." + lastNumber + ".jar"
        println(ymlFileText)

        println(ymlFile.text.toString())

        def incrementLastNumber = (lastNumber + 1)
        if (incrementLastNumber == 10) {
            incrementLastNumber = 0
            middleNumber += 1
        }
        if (middleNumber == 10) {
            middleNumber = 0
            firstNumber += 1
        }
        if (!fileVersion.canWrite()) {
            fileVersion.writable = true
        }
        fileVersion.write("VERSION_CODE=" + firstNumber+ "." + middleNumber + "." + incrementLastNumber)

        def nextVersionDesc =
                "build/libs/BullsAndCows-" + firstNumber+ "." + middleNumber + "." + incrementLastNumber + ".jar"
        def replacedVersion = ymlFileText
                .replace(prevVersionDesc, nextVersionDesc)
        if (!fileVersion.canWrite()) {
            ymlFile.writable = true
        }
        ymlFile.write(replacedVersion)
        println(ymlFile.text.toString())
    }}



